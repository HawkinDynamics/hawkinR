% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/get_tests_ath.R
\name{get_tests_ath}
\alias{get_tests_ath}
\title{Get Test Trials By Athlete}
\usage{
get_tests_ath(athleteId, from = NULL, to = NULL, sync = FALSE, includeInactive = FALSE)
}
\arguments{
\item{athleteId}{Supply an athleteâ€™s id to receive tests for a specific athlete}

\item{from}{Optionally supply a time frame \strong{start} value. Accepts either:
\itemize{
\item A Unix timestamp as an \code{integer} (e.g., \code{1689958617}), or
\item A date as a \code{character} string in \code{"YYYY-MM-DD"} format (e.g., \code{"2023-08-01"}).
}

If not supplied, all available tests from the earliest record will be returned.
Use this parameter for bulk exports or to define a starting point for data retrieval.}

\item{to}{Optionally supply a time frame \strong{end} value. Accepts either:
\itemize{
\item A Unix timestamp as an \code{integer} (e.g., \code{1691207356}), or
\item A date as a \code{character} string in \code{"YYYY-MM-DD"} format (e.g., \code{"2023-08-10"}).
}

If not supplied, all available tests up to the latest record will be returned,
or up to the \code{from} parameter if specified. Use this parameter to limit the
range of historical data retrieved.}

\item{sync}{The result set will include updated and newly created tests. This parameter is best
suited to keep your database in sync with the Hawkin database. If you do not supply this value
you will receive every test.}

\item{includeInactive}{There was a change to the default API configuration to reflect the majority of
users API configuration. Inactive tests or tests where \code{active = false} are returned in these
configuration. Be default, \code{includeInactive} is set to \code{FALSE}. To return all tests, including disabled
trials, set \code{includeInactive} to \code{TRUE}.}
}
\value{
Response will be a data frame containing the trials within the time range (if specified).\tabular{lll}{
   \strong{Column Name} \tab \strong{Type} \tab \strong{Description} \cr
   \strong{id} \tab \emph{str} \tab Test trial unique ID \cr
   \strong{active} \tab \emph{logi} \tab The trial is active and not disabled \cr
   \strong{timestamp} \tab \emph{int} \tab UNIX time stamp of trial \cr
   \strong{segment} \tab \emph{chr} \tab Description of the test type and trial number of the session (testType:trialNo) \cr
   \strong{test_type_id} \tab \emph{chr} \tab Id of the test type of the trial \cr
   \strong{test_type_name} \tab \emph{chr} \tab Name of the test type of the trial \cr
   \strong{test_type_canonicalId} \tab \emph{chr} \tab Canonical Id of the test type of the trial \cr
   \strong{test_type_tag_ids} \tab \emph{chr} \tab String of Ids associated with tags used during the test trial \cr
   \strong{test_type_tag_names} \tab \emph{chr} \tab String of names of tags used during the test trial \cr
   \strong{test_type_tag_desc} \tab \emph{chr} \tab String of descriptions of tags used during the test trial \cr
   \strong{athlete_id} \tab \emph{chr} \tab Unique Id of the athlete \cr
   \strong{athlete_name} \tab \emph{chr} \tab Athlete given name \cr
   \strong{athlete_active} \tab \emph{logi} \tab The athlete is active \cr
   \strong{athlete_teams} \tab \emph{list} \tab List containing Ids of each team the athlete is on \cr
   \strong{athlete_groups} \tab \emph{list} \tab List containing Ids of each group the athlete is in \cr
}


All metrics from each test type are included as the remaining variables.
If a trial does not have data for a variable it is returned NA.
}
\description{
\strong{Deprecated}: Use \code{get_tests} instead, which has been expanded to handle all requests.

Get only tests of the specified athlete for an account.
}
\examples{
\dontrun{
# This is an example of how the function would be called.


## Call for all tests from a specified athlete
df_cmj <- get_tests_ath(athleteId = "athleteId")


## Call for all tests within a specific time frame
dfFromTo <- get_tests_ath(athleteId = "athleteId", from = 1689958617, to = 1691207356)


## Call for all tests since a specific date
dfSince <- get_tests_ath("athleteId", from = 1689958617)
}

}
\seealso{
\code{get_tests}
}
