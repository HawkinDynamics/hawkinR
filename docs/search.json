[{"path":"https://hawkindynamics.github.io/hawkinR/articles/Getting_Started.html","id":"initializing-your-session","dir":"Articles","previous_headings":"","what":"Initializing Your Session","title":"Getting Started With hawkinR","text":"API uses bearer token authentication. form authentication executed providing unique API Integration Key token request server. server provide access token ’s response. process executed within get_access function package. use function initialize session use functions hawkinR package. using get_access providing necessary parameters, access token stored session accessible subsequent calls. need information create API Integration Key, can check article create API token. details cloud site. user may feel situation can securely store integration key device locally. interested article Store API Key. Please note, Org Administrator (account highest level access) able create API tokens.  Please contact techsupport@hawkindynamics.com unsure organization’s administrator.","code":"# use get_access to intialize session get_access( refreshToken = \"your_integration_key\", region = \"your_region\")  \"[1] Success! Your access token was recieved and stored for use by other hawkinR functions. Your token will expire at 2023-11-09 09:44:25\""},{"path":"https://hawkindynamics.github.io/hawkinR/articles/Getting_Started.html","id":"making-your-first-calls","dir":"Articles","previous_headings":"","what":"Making Your First Calls","title":"Getting Started With hawkinR","text":"first time accessing data API, know changes organization since last session, good place start calling organizational data players, teams, groups. information isn’t required call test data, can allow specific queries save server processing loading time calling test data. package built allow ability make requests specific need, lines code possible. execute , need organizational information input parameters needed specificity. calls can done 1 line code one function. function returns data frame can stored R object used necessary. example, store athlete information object called ‘roster’, team information object called ‘teams’, group information object named ‘groups’.","code":""},{"path":"https://hawkindynamics.github.io/hawkinR/articles/Getting_Started.html","id":"get-athletes","dir":"Articles","previous_headings":"Making Your First Calls","what":"Get Athletes:","title":"Getting Started With hawkinR","text":"Returns data frame variables : id, name, active, teams, groups, external. athlete external fields assigned , string contain external name external ID separated colon. multiple externals separated comma.","code":"# store player info in object called roster. 'inactive' is default to FALSE. Set to TRUE if you want to include inactive athletes. roster <- get_athletes(inactive = FALSE)"},{"path":"https://hawkindynamics.github.io/hawkinR/articles/Getting_Started.html","id":"get-teams","dir":"Articles","previous_headings":"Making Your First Calls","what":"Get Teams:","title":"Getting Started With hawkinR","text":"Returns data frame variables: id name.","code":"# store team info in an object called teams. teams <- get_teams()"},{"path":"https://hawkindynamics.github.io/hawkinR/articles/Getting_Started.html","id":"get-groups","dir":"Articles","previous_headings":"Making Your First Calls","what":"Get Groups:","title":"Getting Started With hawkinR","text":"Returns data frame variables: id name.","code":"# store group info in an object called groups. groups <- get_groups()"},{"path":"https://hawkindynamics.github.io/hawkinR/articles/Getting_Started.html","id":"test-types","dir":"Articles","previous_headings":"","what":"Test Types","title":"Getting Started With hawkinR","text":"Lastly, 9 different test collection modes software. thus, 9 different test type IDs. test IDs used get_tests_type function, test name. good idea store test types object well. also single function execute, returns data frame test type name ID. objects, can access IDs information need test queries. See vignettes Get Tests Accessing Force-Time Data Test specific details ways execute queries.","code":"# store test type IDs in an object called testIds testIds <- get_testTypes()"},{"path":"https://hawkindynamics.github.io/hawkinR/articles/Get_ForceTime_Data.html","id":"get-access","dir":"Articles","previous_headings":"","what":"1. Get Access","title":"Accessing Force-Time Data of A Test","text":"Like always, first step getting data initializing session. Simply load hawkinR package run get_access function.","code":"# load the hawkinR package library(hawkinR)  # initialize your current session get_access(refreshToken = 'your_integration_key', region = 'your_region')"},{"path":"https://hawkindynamics.github.io/hawkinR/articles/Get_ForceTime_Data.html","id":"get-tests","dir":"Articles","previous_headings":"","what":"2. Get Tests","title":"Accessing Force-Time Data of A Test","text":"example, going call tests. going need get unique ID first. can include get_tests_ath function.","code":"# create a data frame of my athlete info  roster <- get_athletes()  # My Athlete ID myID <- roster$id[roster$name == \"Lauren Green\"]  # call your tests myTests <- get_tests_ath(athleteId = myID)"},{"path":"https://hawkindynamics.github.io/hawkinR/articles/Get_ForceTime_Data.html","id":"get-test-id","dir":"Articles","previous_headings":"","what":"3. Get Test ID","title":"Accessing Force-Time Data of A Test","text":"Now list tests want evaluate, can call force-time data want using tests unique ID. Every test ’s unique identifier. ’s needed get test data. test Id found first column get_tests function returns. example, calling first test data frame, CMJ trial. just like force-time data. can test types.","code":"# Get the ID of the test myTestID <- myTests$id[1]  # Get the force-time data myFT <- get_forcetime(testId = myTestID)"},{"path":"https://hawkindynamics.github.io/hawkinR/articles/Get_Tests.html","id":"request-all-tests","dir":"Articles","previous_headings":"","what":"Request All Tests","title":"How to Get Tests","text":"common straight forward function call tests get_tests. base request tests two optional parameters: ‘’ ‘’. Using function, can call tests athletes, optionally limit request specific time frame. function, get_tests variations, ‘’ ‘’ optional inputs UNIX datetime can provided limit tests called specific time frame. set NULL default, left alone call tests.","code":"# Call all tests tests <- get_tests()  # Tests in 2022 # as.numeric() and as.POSIXct are base R functions fromDate <- as.numeric(as.POSIXct(\"2022-01-01\")) # returns a UNIX datetime value of 1641024000 toDate <- as.numeric(as.POSIXct(\"2023-01-01\")) # returns a UNIX datetime value of 1672560000  # Call all tests between Jan 1 2022 and Jan 1 2023 tests2022 <- get_tests(from = fromDate, to = toDate)"},{"path":"https://hawkindynamics.github.io/hawkinR/articles/Get_Tests.html","id":"finding-ids","dir":"Articles","previous_headings":"","what":"Finding IDs","title":"How to Get Tests","text":"First, important remember specifics HD athlete data structure. unique entities unique IDs. includes athletes, tests types, teams, groups. athlete MUST part team, MAY optionally group. Also, athletes can part multiple teams multiple groups. see teams /groups athlete part , can find data frame returned get_athletes. information , can go Getting Started page specifics.","code":"# Store player info in object called roster.  # 'inactive' is default to FALSE. Set to TRUE if you want to include inactive athletes. roster <- get_athletes(inactive = FALSE)"},{"path":"https://hawkindynamics.github.io/hawkinR/articles/Get_Tests.html","id":"get-tests-by-athlete","dir":"Articles","previous_headings":"","what":"Get Tests By Athlete","title":"How to Get Tests","text":"get_tests_ variations, one mandatory parameter (id) 2 optional parameters (). get_tests_ath form, simply input single athlete’s unique ID. , found ‘id’ column data frame returned get_athletes. Remember can use function request tests singular athlete. wanted call multiple athletes, done get_tests_group get_tests_team. can create many groups need cloud use groupId request, shown . request tests Athlete One:","code":"# get athlete ID athID <- roster$id[roster$name == \"Athlete One\"]  # call tests testsAth1 <- get_tests_ath(athleteId = athID)"},{"path":"https://hawkindynamics.github.io/hawkinR/articles/Get_Tests.html","id":"get-tests-by-test-type","dir":"Articles","previous_headings":"","what":"Get Tests By Test Type","title":"How to Get Tests","text":"Similarly tests athlete, can call tests singular type. great option organizing tests specific analysis based tests type. allows create separate data frame test type filter later steps. limits metrics returned specific test type. get_tests functions columns possible variables, makes wide data frame. example request Multi Rebound test trials:","code":"# get test type IDs types <- get_testTypes()  # get test ID for Multi Rebound typeID <- types$id[types$name == \"Multi Rebound\"]  # Call for multi rebound tests testsMR <- get_tests_type( typeId = typeID)"},{"path":"https://hawkindynamics.github.io/hawkinR/articles/Get_Tests.html","id":"get-tests-by-teamgroup","dir":"Articles","previous_headings":"","what":"Get Tests By Team/Group","title":"How to Get Tests","text":"saw ‘roster’ data frame, athlete part team group, ID team/group included string value variable. IDs easy us read memorize, don’t . IDs accessible team/group given name data frames returned get_teams get_groups functions.","code":""},{"path":"https://hawkindynamics.github.io/hawkinR/articles/Get_Tests.html","id":"get-team-tests","dir":"Articles","previous_headings":"Get Tests By Team/Group","what":"Get Team Tests","title":"How to Get Tests","text":"Now team IDs , everything need call test data using get_tests_team function. function three parameters: teamId, , . function, get_tests variations, ‘’ ‘’ optional inputs UNIX datetime can provided limit tests called specific time frame. set NULL default, left alone call tests meet teamId criteria. ‘teamId’ parameter, required string one team IDs. want call data one team, simply enter IDs single comma separated string.","code":""},{"path":"https://hawkindynamics.github.io/hawkinR/articles/Get_Tests.html","id":"teams","dir":"Articles","previous_headings":"Get Tests By Team/Group > Get Team Tests","what":"Teams:","title":"How to Get Tests","text":"example, request tests Team One since Jan 1, 2022: return tests Team One since January 1, 2022.","code":"# store team info in an object called teams. teams <- get_teams() # get Team One teamId teamID <- teams$id[teams$name == \"Team One\"]  # set from date fromDate <- as.numeric(as.POSIXct(\"2022-01-01\")) # as.numeric() and as.POSIXct are base R functions, and returns a UNIX datetime value of 1641024000  # create request for team tests teamTests <- get_tests_team(teamId = teamID, from = fromDate)"},{"path":"https://hawkindynamics.github.io/hawkinR/articles/Get_Tests.html","id":"get-group-tests","dir":"Articles","previous_headings":"","what":"Get Group Tests","title":"How to Get Tests","text":"operations get_tests_team function apply get_tests_group function. difference first parameter ‘groupId’ instead ‘teamId’. important note can’t use queries interchangeably together. Entering team’s ID ‘groupId’ parameter won’t produce returns ID won’t match values parameter. two separate functions.","code":""},{"path":"https://hawkindynamics.github.io/hawkinR/articles/Get_Tests.html","id":"groups","dir":"Articles","previous_headings":"Get Group Tests","what":"Groups:","title":"How to Get Tests","text":"group example, call tests multiple groups (Position Group, Grad Year Group) May 1, 2023: return tests ‘Position Group’ ‘Grad Year Group’ groups May 1, 2023. test trials unique ID. testId used get_forcetime function call raw data trial. See Accessing Force-Time Data Test information.","code":"# store group info in an object called groups. groups <- get_groups() # get group IDs group1ID <- groups$id[groups$name == \"Position Group\"] group2ID <- groups$id[groups$name == \"Grad Year Group\"]  # paste group IDs to make single string value groupIDs <- paste(group1ID,group2ID, sep = \",\") # set 'sep' to \",\" for comma seperated string # returned value will be \"0j20j09jd9ud0j,92d2098d02j0\"  # set from date toDate <- as.numeric(as.POSIXct(\"2023-05-01\")) # as.numeric() and as.POSIXct are base R functions, and returns a UNIX datetime value of 1682924400  # create request for group tests groupTests <- get_tests_group(groupId = groupIDs, to = toDate)"},{"path":"https://hawkindynamics.github.io/hawkinR/articles/Store_API_Key_Locally.html","id":"your-api-integration-key","dir":"Articles","previous_headings":"","what":"Your API Integration Key","title":"How to store your API Key","text":"using hawkinR package, need access sites API integration key. users AMS integrations already created one scenarios. likely create use different key separate interactions analysis R. sure create new API key need refresher, article walk steps. recommend treat token way treat username password store somewhere safe. feel local system programming environment safe, couple ways can store API integration key locally save steps accessing data via hawkinR package.","code":""},{"path":"https://hawkindynamics.github.io/hawkinR/articles/Store_API_Key_Locally.html","id":"accessing-your-data","dir":"Articles","previous_headings":"Your API Integration Key","what":"Accessing Your Data","title":"How to store your API Key","text":"utilize function’s hawkinR package, first need run get_access() function initialize session getting refresh token API. successfully, function requires provide unique integration key (ie get_access(refreshToken = 'enter_APIkey_here') ). step necessary keeping data secure, can annoyance open separate text file copy-paste key every time.","code":""},{"path":"https://hawkindynamics.github.io/hawkinR/articles/Store_API_Key_Locally.html","id":"storing-your-integration-key","dir":"Articles","previous_headings":"Your API Integration Key","what":"Storing Your Integration Key","title":"How to store your API Key","text":"feel safe environment, ways store integration key locally. can store API token RStudio using environment variables creating separate configuration file store token securely. two common methods :","code":""},{"path":"https://hawkindynamics.github.io/hawkinR/articles/Store_API_Key_Locally.html","id":"using-environment-variables-less-secure","dir":"Articles","previous_headings":"Your API Integration Key > Storing Your Integration Key","what":"Using Environment Variables (less secure)","title":"How to store your API Key","text":"Open RStudio session. R console, can set environment variable using Sys.setenv() function: can access environment variable R scripts using Sys.getenv(\"API_KEY\"). make setting persistent across RStudio sessions, can add Sys.setenv() line R profile .Renviron file. edit R profile create .Renviron file, can use usethis package:","code":"Sys.setenv(API_KEY=\"your_api_key_here\") # Install usethis package if you haven't already install.packages(\"usethis\")  # Edit your R profile usethis::edit_r_profile()  # Add the Sys.setenv() line to your R profile or create a .Renviron file # and add the environment variable setting there."},{"path":"https://hawkindynamics.github.io/hawkinR/articles/Store_API_Key_Locally.html","id":"using-a-configuration-file-more-secure","dir":"Articles","previous_headings":"Your API Integration Key > Storing Your Integration Key","what":"Using a Configuration File (more secure)","title":"How to store your API Key","text":"Create separate configuration file (e.g., text file) store API token securely. store sensitive information plain text, educational purposes, can create file named config.txt API key : , can read configuration file R script extract API key variable: Make sure place config.txt file secure location restrict access . Remember storing sensitive information like API keys plain text files environment variables can security risk. production secure environments, consider using dedicated secrets management tool service store retrieve API keys securely.","code":"API_KEY=your_api_key_here config <- read.table(\"config.txt\", sep = \"=\", stringsAsFactors = FALSE, col.names = c(\"key\", \"value\")) api_key <- config[config$key == \"API_KEY\", \"value\"]"},{"path":"https://hawkindynamics.github.io/hawkinR/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Lauren Green. Author, maintainer.","code":""},{"path":"https://hawkindynamics.github.io/hawkinR/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Green L (2024). hawkinR: R package work data Hawkin Dynamics API. https://github.com/HawkinDynamics/hawkinR, https://hawkindynamics.github.io/hawkinR/.","code":"@Manual{,   title = {hawkinR: R package to work with data from the Hawkin Dynamics API},   author = {Lauren Green},   year = {2024},   note = {https://github.com/HawkinDynamics/hawkinR, https://hawkindynamics.github.io/hawkinR/}, }"},{"path":"https://hawkindynamics.github.io/hawkinR/index.html","id":"hawkinr-","dir":"","previous_headings":"","what":"R package to work with data from the Hawkin Dynamics API","title":"R package to work with data from the Hawkin Dynamics API","text":"Get data Hawkin Dynamics API hawkinR provides simple functionality Hawkin Dynamics API. functions use ‘Hawkin Dynamics Beta API’ version 1.9-beta. must Hawkin Dynamics user active integration account utilize functions within package.","code":""},{"path":"https://hawkindynamics.github.io/hawkinR/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"R package to work with data from the Hawkin Dynamics API","text":"can install development version hawkinR GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"HawkinDynamics/hawkinR\")"},{"path":"https://hawkindynamics.github.io/hawkinR/index.html","id":"functions","dir":"","previous_headings":"","what":"Functions","title":"R package to work with data from the Hawkin Dynamics API","text":"API designed get data Hawkin Dynamics database database. designed accessed client applications directly. limit amount data can returned single request. database grows, necessary use parameters limit size responses. Responses exceed memory limit fail. advised design client handle beginning. recommended pattern two methods fetching data. scheduled pull uses parameters constrain returned data tests occurred since last fetch e.g. every day every 5 minutes. pull fetches entire database since began testing executed necessary. recommended way generate parameters month since started send request either parallel sequentially. package meant help execute requests Hawkin Dynamics API single line code. 11 functions help execute 4 primary objectives:","code":""},{"path":"https://hawkindynamics.github.io/hawkinR/index.html","id":"get-access","dir":"","previous_headings":"Functions","what":"Get Access","title":"R package to work with data from the Hawkin Dynamics API","text":"get_access() - Use Refresh Token generated https://cloud.hawkindynamics.com/integrations get valid Access Token. organization administrator account ability generate API tokens. Use function initiate access data cloud. hawkinR functions depend values returned function.","code":""},{"path":"https://hawkindynamics.github.io/hawkinR/index.html","id":"get-test-types","dir":"","previous_headings":"Functions","what":"Get Test Types","title":"R package to work with data from the Hawkin Dynamics API","text":"get_testTypes() - Get test type names ids test types system. Response data frame containing tests HD system.","code":""},{"path":"https://hawkindynamics.github.io/hawkinR/index.html","id":"get-organization-data","dir":"","previous_headings":"Functions","what":"Get Organization Data","title":"R package to work with data from the Hawkin Dynamics API","text":"get_athletes() - Get athletes account. Inactive players included `inactive` parameter set TRUE. Response data frame containing athletes match query. get_teams() - Get team names ids teams org. Response data frame containing teams organization. get_groups() - Get group names ids groups org. Response data frame containing groups organization.","code":""},{"path":"https://hawkindynamics.github.io/hawkinR/index.html","id":"get-test-data","dir":"","previous_headings":"Functions","what":"Get Test Data","title":"R package to work with data from the Hawkin Dynamics API","text":"get_forcetime() - Get force-time data specific test id. includes left, right combined force data 1000hz (per millisecond). Calculated velocity, displacement, power time interval also included. get_tests() - Get tests account. can specify time frame , , tests come (synced). Response data frame containing trials within time range (specified). get_tests_type() - Get tests specified type account. Response data frame containing trials specified type within time range (specified). get_tests_ath() - Get tests specified athlete account. Response data frame containing trials specified team within time range (specified). get_tests_team() - Get tests specified team account. Response data frame containing trials specified team within time range (specified). get_tests_group() - Get tests specified group account. Response data frame containing trials specified team within time range (specified).","code":""},{"path":"https://hawkindynamics.github.io/hawkinR/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"R package to work with data from the Hawkin Dynamics API","text":"basic example shows common workflow:","code":"library(hawkinR)   # 1. Get access to your site  ## Store you secret API key refreshToken <- 'your-secret-api-key' # ## Get access token. When successful, access token is stored for use in the session. get_access(\"refreshToken\", region = \"Americas\")   # 2. Get Org data  ## Team data frame teamList <- get_teams() # ## Create list of teams teamIds <- paste0(teamList$id[1],teamList$id[3],teamList$id[4])  ## Athlete data frame athList <- get_athletes() # ## Create athleteId athId <- athList$id[6]  # 3. Get Test Data  ## Initial test call allTests <- get_tests() # ## Create last test or sync date lastSync <- max(allTests$lastSyncTime) # ## Create phase to review phaseDate1 <- allTests$timestamp[30] # from dateTime phaseDate2 <- allTests$timestamp[10] # to dateTime  ## Sync tests since a time point. df_SyncFrom <- get_tests(from = lastSync, sync = TRUE)  ## Get tests by athlete in time frame. df_athTests <- get_tests_ath(athleteId = athId, from = phaseDate1, to = phaseDate2)  ## Get all tests by team df_teamTests <- get_tests_team(teamId = teamIds)  ## Get test force-time data df_forceData <- get_forcetime(testId = df_athTests$id[10])"},{"path":"https://hawkindynamics.github.io/hawkinR/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 hdforce authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://hawkindynamics.github.io/hawkinR/reference/get_access.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Access Token — get_access","title":"Get Access Token — get_access","text":"Use Refresh Token generated get valid Access Token. organization administrator account ability generate API tokens.","code":""},{"path":"https://hawkindynamics.github.io/hawkinR/reference/get_access.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Access Token — get_access","text":"","code":"get_access(`refreshToken`, `region` = \"Americas\")"},{"path":"https://hawkindynamics.github.io/hawkinR/reference/get_access.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Access Token — get_access","text":"refreshToken Use Refresh Token generated 'https://cloud.hawkindynamics.com/integrations'. region region define URL used. Options: \"Americas\" (default), \"Europe\", \"Asia/Pacific\".","code":""},{"path":"https://hawkindynamics.github.io/hawkinR/reference/get_access.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Access Token — get_access","text":"data frame necessary information accessing API (access token, token expiration, URL region). contents data frame stored system environment.","code":""},{"path":"https://hawkindynamics.github.io/hawkinR/reference/get_access.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get Access Token — get_access","text":"Use function initiate access data cloud. hawkinR functions depend values returned function. correct inputs passed region refreshToken parameters, returned access token, expiration time, regional URL stored system use functions session. accessToken set expire every 60 minutes. token expired, attempt use dependent function, prompted run function receive new access token.","code":""},{"path":"https://hawkindynamics.github.io/hawkinR/reference/get_access.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Access Token — get_access","text":"","code":"if (FALSE) { # This is an example of how the function would be called with the region defaulting to \"Americas\". # Replace 'refresh token' with an actual authentication token.  get_access('refreshToken')  # If you are in a different region and use one of the other URLs, declare your region by using the #`region` parameter.  get_access('refreshToken', region = \"Europe\") }"},{"path":"https://hawkindynamics.github.io/hawkinR/reference/get_athletes.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Athletes — get_athletes","title":"Get Athletes — get_athletes","text":"Get athletes account. Inactive players included inactive parameter set TRUE.","code":""},{"path":"https://hawkindynamics.github.io/hawkinR/reference/get_athletes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Athletes — get_athletes","text":"","code":"get_athletes(inactive = FALSE)"},{"path":"https://hawkindynamics.github.io/hawkinR/reference/get_athletes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Athletes — get_athletes","text":"inactive FALSE default exclude inactive players database. Set TRUE want inactive players included return.","code":""},{"path":"https://hawkindynamics.github.io/hawkinR/reference/get_athletes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Athletes — get_athletes","text":"Response data frame containing athletes match query. athlete includes following variables: id  chr   athlete's unique ID name  chr   athlete's given name (First Last) active  logi   athlete active (TRUE) teams  chr   team ids separated \",\" groups  chr  group ids separated \",\" external  chr external ids strings \"externalName:externalId\" separated \",\"","code":""},{"path":"https://hawkindynamics.github.io/hawkinR/reference/get_athletes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Athletes — get_athletes","text":"","code":"if (FALSE) { # This is an example of how the function would be called. If you only wish to call active players, # you don't need to provide any parameters.  df_athletes <- get_athletes()  # If you want to include all athletes, including inactive athletes, include the optional # `inactive` parameter.  df_wInactive <- get_athletes(inactive = TRUE)  }"},{"path":"https://hawkindynamics.github.io/hawkinR/reference/get_forcetime.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Force-Time Data — get_forcetime","title":"Get Force-Time Data — get_forcetime","text":"Get force-time data specific test id. includes left, right combined force data 1000hz (per millisecond). Calculated velocity, displacement, power time interval also included.","code":""},{"path":"https://hawkindynamics.github.io/hawkinR/reference/get_forcetime.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Force-Time Data — get_forcetime","text":"","code":"get_forcetime(testId)"},{"path":"https://hawkindynamics.github.io/hawkinR/reference/get_forcetime.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Force-Time Data — get_forcetime","text":"testId Give unique test id trial want called.","code":""},{"path":"https://hawkindynamics.github.io/hawkinR/reference/get_forcetime.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Force-Time Data — get_forcetime","text":"Response data frame containing following: time_s  int   Elapsed time seconds, starting end identified quiet phase force_right  int   Force recorded RIGHT platform coinciding time point  time_s, measured Newtons (N) force_Left  int   Force recorded LEFT platform coinciding time point  time_s, measured Newtons (N) force_combined  int   Sum forces LEFT RIGHT, coinciding time point  time_s, measured Newtons (N) velocity_m.s  int   Calculated velocity center mass time interval, measured meters per second (m/s) displacement_m  int   Calculated displacement center mass time interval, measured meters (m) power_w  int   Calculated power mass time interval, measured watts (W)","code":""},{"path":"https://hawkindynamics.github.io/hawkinR/reference/get_forcetime.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Force-Time Data — get_forcetime","text":"","code":"if (FALSE) { # This is an example of how the function would be called.  df_ft <- get_forcetime( testId = `stringId` )  }"},{"path":"https://hawkindynamics.github.io/hawkinR/reference/get_groups.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Groups — get_groups","title":"Get Groups — get_groups","text":"Get group names ids groups org.","code":""},{"path":"https://hawkindynamics.github.io/hawkinR/reference/get_groups.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Groups — get_groups","text":"","code":"get_groups()"},{"path":"https://hawkindynamics.github.io/hawkinR/reference/get_groups.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Groups — get_groups","text":"Response data frame containing groups organization. group following variables: id  chr   group's unique ID name  chr   group's given name","code":""},{"path":"https://hawkindynamics.github.io/hawkinR/reference/get_groups.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Groups — get_groups","text":"","code":"if (FALSE) { # This is an example of how the function would be called.  df_groups <- get_groups()  }"},{"path":"https://hawkindynamics.github.io/hawkinR/reference/get_teams.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Teams — get_teams","title":"Get Teams — get_teams","text":"Get team names ids teams org.","code":""},{"path":"https://hawkindynamics.github.io/hawkinR/reference/get_teams.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Teams — get_teams","text":"","code":"get_teams()"},{"path":"https://hawkindynamics.github.io/hawkinR/reference/get_teams.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Teams — get_teams","text":"Response data frame containing teams organization. team following variables: id  chr   team's unique ID name  chr   team's given name","code":""},{"path":"https://hawkindynamics.github.io/hawkinR/reference/get_teams.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Teams — get_teams","text":"","code":"if (FALSE) { # This is an example of how the function would be called.  df_teams <- get_teams()  }"},{"path":"https://hawkindynamics.github.io/hawkinR/reference/get_tests.html","id":null,"dir":"Reference","previous_headings":"","what":"Get All Tests or Sync Tests — get_tests","title":"Get All Tests or Sync Tests — get_tests","text":"Get tests account. can specify time frame , , tests come (synced).","code":""},{"path":"https://hawkindynamics.github.io/hawkinR/reference/get_tests.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get All Tests or Sync Tests — get_tests","text":"","code":"get_tests(from, to, sync = FALSE, active = TRUE)"},{"path":"https://hawkindynamics.github.io/hawkinR/reference/get_tests.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get All Tests or Sync Tests — get_tests","text":"Optionally supply time (Unix timestamp) want tests . supply value receive every test. parameter best suited bulk exports historical data Optionally supply time (Unix timestamp) want tests . supply value receive every test beginning time optionally supplied parameter. parameter best suited bulk exports historical data. sync result set include updated newly created tests. parameter best suited keep database sync Hawkin database. supply value receive every test. active change default API configuration reflect majority users API configuration. Inactive tests tests active:false returned configuration. default, active set TRUE. return tests, including disabled trials, set active FALSE.","code":""},{"path":"https://hawkindynamics.github.io/hawkinR/reference/get_tests.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get All Tests or Sync Tests — get_tests","text":"Response data frame containing trials within time range (specified). id  str   Test trial unique ID active  logi   trial active disabled timestamp  int   UNIX timestamp trial segment  chr   Description test type trial number session (testType:trialNo) test_type_id  chr   Id test type trial test_type_name  chr   Name test type trial test_type_canonicalId  chr   Canonical Id test type trial test_type_tag_ids  chr   String Ids associated tags used test trial test_type_tag_names  chr   String names tags used test trial test_type_tag_desc  chr   String descriptions tags used test trial athlete_id  chr   Unique Id athlete athlete_name  chr   Athlete given name athlete_active  logi   athlete active athlete_teams  list   List containing Ids team athlete athlete_groups  list   List containing Ids group athlete metrics test type included remaining variables. trial data variable returned NA.","code":""},{"path":[]},{"path":"https://hawkindynamics.github.io/hawkinR/reference/get_tests_ath.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Test Trials By Athlete — get_tests_ath","title":"Get Test Trials By Athlete — get_tests_ath","text":"Get tests specified athlete account.","code":""},{"path":"https://hawkindynamics.github.io/hawkinR/reference/get_tests_ath.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Test Trials By Athlete — get_tests_ath","text":"","code":"get_tests_ath(athleteId, from, to, sync = FALSE, active = TRUE)"},{"path":"https://hawkindynamics.github.io/hawkinR/reference/get_tests_ath.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Test Trials By Athlete — get_tests_ath","text":"athleteId Supply athlete’s id receive tests specific athlete Optionally supply time (Unix timestamp) want tests . supply value receive every test. parameter best suited bulk exports historical data Optionally supply time (Unix timestamp) want tests . supply value receive every test beginning time optionally supplied parameter. parameter best suited bulk exports historical data. sync result set include updated newly created tests. parameter best suited keep database sync Hawkin database. supply value receive every test. active change default API configuration reflect majority users API configuration. Inactive tests tests active:false returned configuration. default, active set TRUE. return tests, including disabled trials, set active FALSE.","code":""},{"path":"https://hawkindynamics.github.io/hawkinR/reference/get_tests_ath.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Test Trials By Athlete — get_tests_ath","text":"Response data frame containing trials specified team within time range (specified). id  str   Test trial unique ID active  logi   trial active disabled timestamp  int   UNIX timestamp trial segment  chr   Description test type trial number session (testType:trialNo) testType.id  chr   Id test type trial testType.name  chr   Name test type trial testType.canonicalId  chr   Canonical Id test type trial test_type_tag_ids  chr   String Ids associated tags used test trial test_type_tag_names  chr   String names tags used test trial test_type_tag_desc  chr   String descriptions tags used test trial athlete.id  chr   Unique Id athlete athlete.name  chr   Athlete given name athlete.active  logi   athlete active athlete.teams  list   List containing Ids team athlete athlete.groups  list   List containing Ids group athlete metrics test type included remaining variables. trial data variable returned NA.","code":""},{"path":"https://hawkindynamics.github.io/hawkinR/reference/get_tests_ath.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Test Trials By Athlete — get_tests_ath","text":"","code":"if (FALSE) { # This is an example of how the function would be called.   ## Call for all tests from a specified athlete df_cmj <- get_tests_ath(athleteId = \"athleteId\")   ## Call for all tests within a specific time frame dfFromTo <- get_tests_ath(athleteId = \"athleteId\", from = 1689958617, to = 1691207356)   ## Call for all tests since a specific date dfSince <- get_tests_ath(\"athleteId\", from = 1689958617)  }"},{"path":"https://hawkindynamics.github.io/hawkinR/reference/get_tests_group.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Test Trials By Groups — get_tests_group","title":"Get Test Trials By Groups — get_tests_group","text":"Get tests specified group account.","code":""},{"path":"https://hawkindynamics.github.io/hawkinR/reference/get_tests_group.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Test Trials By Groups — get_tests_group","text":"","code":"get_tests_group(groupId, from, to, sync = FALSE, active = TRUE)"},{"path":"https://hawkindynamics.github.io/hawkinR/reference/get_tests_group.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Test Trials By Groups — get_tests_group","text":"groupId Supply group’s string comma separated list group id’s receive tests specific groups. Recommended use method paste0(). maximum 10 groups can fetched . Optionally supply time (Unix timestamp) want tests . supply value receive every test. parameter best suited bulk exports historical data. Optionally supply time (Unix timestamp) want tests . supply value receive every test beginning time optionally supplied parameter. parameter best suited bulk exports historical data. sync result set include updated newly created tests. parameter best suited keep database sync Hawkin database. supply value receive every test. active change default API configuration reflect majority users API configuration. Inactive tests tests active:false returned configuration. default, active set TRUE. return tests, including disabled trials, set active FALSE.","code":""},{"path":"https://hawkindynamics.github.io/hawkinR/reference/get_tests_group.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Test Trials By Groups — get_tests_group","text":"Response data frame containing trials specified team within time range (specified). id  str   Test trial unique ID active  logi   trial active disabled timestamp  int   UNIX timestamp trial segment  chr   Description test type trial number session (testType:trialNo) testType.id  chr   Id test type trial testType.name  chr   Name test type trial testType.canonicalId  chr   Canonical Id test type trial test_type_tag_ids  chr   String Ids associated tags used test trial test_type_tag_names  chr   String names tags used test trial test_type_tag_desc  chr   String descriptions tags used test trial athlete.id  chr   Unique Id athlete athlete.name  chr   Athlete given name athlete.active  logi   athlete active athlete.teams  list   List containing Ids team athlete athlete.groups  list   List containing Ids group athlete metrics test type included remaining variables. trial data variable returned NA.","code":""},{"path":"https://hawkindynamics.github.io/hawkinR/reference/get_tests_group.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Test Trials By Groups — get_tests_group","text":"","code":"if (FALSE) { # This is an example of how the function would be called.   ## Call for all tests by Group 1 dfGroup1 <- get_tests_group(groupId = \"group1\")   ## Call for all tests from Groups 1 & 2 dfGroups_1_2 <- get_tests_group(groupId = paste0(\"group1\",\"group2\"))   ## Call for all Group 1 tests since a specific date df_Group1_Since <- get_tests_group(\"group1\", from = 1689958617)  }"},{"path":"https://hawkindynamics.github.io/hawkinR/reference/get_tests_team.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Test Trials By Teams — get_tests_team","title":"Get Test Trials By Teams — get_tests_team","text":"Get tests specified team account.","code":""},{"path":"https://hawkindynamics.github.io/hawkinR/reference/get_tests_team.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Test Trials By Teams — get_tests_team","text":"","code":"get_tests_team(teamId, from, to, sync = FALSE, active = TRUE)"},{"path":"https://hawkindynamics.github.io/hawkinR/reference/get_tests_team.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Test Trials By Teams — get_tests_team","text":"teamId Supply team’s string comma separated list group id’s receive tests specific groups. Recommended use method paste0(). maximum 10 groups can fetched . Optionally supply time (Unix timestamp) want tests . supply value receive every test. parameter best suited bulk exports historical data. Optionally supply time (Unix timestamp) want tests . supply value receive every test beginning time optionally supplied parameter. parameter best suited bulk exports historical data. sync result set include updated newly created tests. parameter best suited keep database sync Hawkin database. supply value receive every test. active change default API configuration reflect majority users API configuration. Inactive tests tests active:false returned configuration. default, active set TRUE. return tests, including disabled trials, set active FALSE.","code":""},{"path":"https://hawkindynamics.github.io/hawkinR/reference/get_tests_team.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Test Trials By Teams — get_tests_team","text":"Response data frame containing trials specified team within time range (specified). id  str   Test trial unique ID active  logi   trial active disabled timestamp  int   UNIX timestamp trial segment  chr   Description test type trial number session (testType:trialNo) testType.id  chr   Id test type trial testType.name  chr   Name test type trial testType.canonicalId  chr   Canonical Id test type trial test_type_tag_ids  chr   String Ids associated tags used test trial test_type_tag_names  chr   String names tags used test trial test_type_tag_desc  chr   String descriptions tags used test trial athlete.id  chr   Unique Id athlete athlete.name  chr   Athlete given name athlete.active  logi   athlete active athlete.teams  List   list containing Ids team athlete athlete.groups  List   list containing Ids group athlete metrics test type included remaining variables. trial data variable returned NA.","code":""},{"path":"https://hawkindynamics.github.io/hawkinR/reference/get_tests_team.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Test Trials By Teams — get_tests_team","text":"","code":"if (FALSE) { # This is an example of how the function would be called.   ## Call for all tests by Group 1 dfteam1 <- get_tests_team(teamId = \"team1\")   ## Call for all tests from Groups 1 & 2 dfteam_1_2 <- get_tests_team(teamId = paste0(\"team1\",\"team2\"))   ## Call for all Group 1 tests since a specific date df_team1_Since <- get_tests_team(\"team1\", from = 1689958617)  }"},{"path":"https://hawkindynamics.github.io/hawkinR/reference/get_tests_type.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Test Trials By Test Type — get_tests_type","title":"Get Test Trials By Test Type — get_tests_type","text":"Get tests specified type account.","code":""},{"path":"https://hawkindynamics.github.io/hawkinR/reference/get_tests_type.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Test Trials By Test Type — get_tests_type","text":"","code":"get_tests_type(typeId, from, to, sync = FALSE, active = TRUE)"},{"path":"https://hawkindynamics.github.io/hawkinR/reference/get_tests_type.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Test Trials By Test Type — get_tests_type","text":"typeId Supply test type id retrieve tests type. Optionally supply time (Unix timestamp) want tests . supply value receive every test. parameter best suited bulk exports historical data. Optionally supply time (Unix timestamp) want tests . supply value receive every test beginning time optionally supplied parameter. parameter best suited bulk exports historical data. sync result set include updated newly created tests. parameter best suited keep database sync Hawkin database. supply value receive every test. active change default API configuration reflect majority users API configuration. Inactive tests tests active:false returned configuration. default, active set TRUE. return tests, including disabled trials, set active FALSE.","code":""},{"path":"https://hawkindynamics.github.io/hawkinR/reference/get_tests_type.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Test Trials By Test Type — get_tests_type","text":"Response data frame containing trials specified type within time range (specified). id  str   Test trial unique ID active  logi   trial active disabled timestamp  int   UNIX timestamp trial segment  chr   Description test type trial number session (testType:trialNo) testType.id  chr   Id test type trial testType.name  chr   Name test type trial testType.canonicalId  chr   Canonical Id test type trial test_type_tag_ids  chr   String Ids associated tags used test trial test_type_tag_names  chr   String names tags used test trial test_type_tag_desc  chr   String descriptions tags used test trial athlete.id  chr   Unique Id athlete athlete.name  chr   Athlete given name athlete.active  logi   athlete active athlete.teams  list   List containing Ids team athlete athlete.groups  list   List containing Ids group athlete metrics given test type included remaining variables.","code":""},{"path":"https://hawkindynamics.github.io/hawkinR/reference/get_tests_type.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Test Trials By Test Type — get_tests_type","text":"","code":"if (FALSE) { # This is an example of how the function would be called.   ## Call for all CMJ tests df_cmj <- get_tests_type(typeId = \"7nNduHeM5zETPjHxvm7s\")   ## Call for Free Run tests within a  specific time frame df_free <- get_tests_type(typeId = \"5pRSUQVSJVnxijpPMck3\", from = 1689958617, to = 1691207356)   ## Call for Squat Jump tests since a specific date df_sjSince <- get_tests_type(\"QEG7m7DhYsD6BrcQ8pic\", from = 1689958617)  }"},{"path":"https://hawkindynamics.github.io/hawkinR/reference/get_testTypes.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Test Types — get_testTypes","title":"Get Test Types — get_testTypes","text":"Get test type names ids test types system.","code":""},{"path":"https://hawkindynamics.github.io/hawkinR/reference/get_testTypes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Test Types — get_testTypes","text":"","code":"get_testTypes()"},{"path":"https://hawkindynamics.github.io/hawkinR/reference/get_testTypes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Test Types — get_testTypes","text":"Response data frame containing tests HD system. test type includes following variables: id  chr   test's unique ID name  chr   test's given name","code":""},{"path":"https://hawkindynamics.github.io/hawkinR/reference/get_testTypes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Test Types — get_testTypes","text":"","code":"if (FALSE) { # This is an example of how the function would be called.  df_tests <- get_testTypes()  }"},{"path":"https://hawkindynamics.github.io/hawkinR/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://hawkindynamics.github.io/hawkinR/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://hawkindynamics.github.io/hawkinR/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"https://hawkindynamics.github.io/hawkinR/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling rhs(lhs).","code":""}]
