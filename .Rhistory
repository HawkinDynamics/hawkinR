devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
?get_athletes
usethis::use_package("rlang")
usethis::use_pipe()
devtools::document()
usethis::use_mit_license()
library(hawkinR)
devtools::load_all(".")
library(hawkinR)
devtools::load_all(".")
?accToken
?get_athletes
library(tools, lib.loc = "C:/Program Files/R/R-4.3.1/library")
install.packages(c("tidyverse", "devtools"))
library(dplyr)
detach("package:dplyr", unload = TRUE)
library(usethis)
library(roxygen2)
library(devtools)
use_r("get_cmj")
usethis::use_r("get_testTypes")
usethis::use_r("get_test_type")
library(devtools)
devtools::load_all(".")
library(hawkinR)
?get_testTypes
?get_testTypes
library(hawkinR)
?get_testTypes
library(hawkinR)
library(hawkinR)
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
usethis::use_test()
devtools::load_all(".")
devtools::load_all(".")
Sys.getenv("accessToken")
get_access("uI1J4T.f6AYZqUI3XUeuEUaTZdIsCKtl8KML")
usethis::use_test()
devtools::test_coverage()
usethis::use_news_md()
usethis::use_version()
badgecreatr::badge_last_change()
badgecreatr::badge_minimal_r_version()
badgecreatr::badge_projectstatus("active")
usethis::use_version()
badgecreatr::badge_packageversion()
library(hawkinR)
devtools::load_all(".")
get_access(secret)
get_access("uI1J4T.f6AYZqUI3XUeuEUaTZdIsCKtl8KML")
Sys.getenv("accessToken")
Sys.getenv("accessToken_expiration")
devtools::build()
library(devtools)
library(devtools)
library(badgecreatr)
badge_last_change()
badge_packageversion()
devtools::load_all(".")
library(devtools)
getwd()
library(devtools)
library(devtools)
use_vignette("Store_API_Key_Locally", title = "How to store your API Key")
use_vignette("Get_ForceTime_Data", title = "Getting Force-Time Data")
use_vignette("Getting_Started", title = "Getting Started With hawkinR")
use_vignette("Tests_by_group_team", title = "How to Get Tests By Group/Team")
use_vignette("Tests_by_Athlete", title = "Get Tests For An Athlete")
library(gh)
gh_token("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")
gh_token_info()
install.packages(gh)
install.packages('gh')
install.packages("gh")
library(gh)
gh::gh_token("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")
usethis::use_pkgdown_github_pages()
usethis::use_pkgdown_github_pages()
usethis::use_pkgdown_github_pages()
getwd()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
library(devtools)
# From DateTime
fromDT <- if(base::is.null(from)) {
""
} else if(base::is.numeric(from) && base::isTRUE(sync)) {
base::paste0("?syncFrom=",from)
} else if(base::is.numeric(from) && base::isFALSE(sync)) {
base::paste0("?from=",from)
}
devtools::load_all(".")
pkgdown::build_site()
library(usethis)
edit_r_environ()
install.packages("remotes")
library(remotes)
library(remotes)
install_github("laureng_hd/hawkinR")
install_github("HawkinDynamics/hawkinR")
pkgdown::build_site()
library(devtools)
usethis::use_r("get_tags")
use_test()
#-----#
# Invalid testId param
test_that("get_forcetime with invalid testId", {
expect_error(get_forcetime(12345))
})
#-----#
# invalid from type
test_that("get_tests_ath with invalid from", {
expect_error(get_tests_ath(athleteId = "OLbsebtmf81eiwg1AeE5", from = "fromDate"))
})
# Validate output structure
test_that("get_groups output structure", {
# Set up access token and expiration environment variables
Sys.setenv(accessToken = rtoken, accessToken_expiration = expTime)
result <- get_groups()
# Check the structure of the data frame
expect_equal(colnames(result), c("id", "name"))
})
#-----#
# Successful execution
test_that("get_tests_team with valid access token and default parameters", {
result <- get_tests_team(teamId = "DPMb6ek2mgUNVcg8siSqpnIvE2i2")
# Validate the structure and values of the result data frame
expect_s3_class(result, "data.frame")
})
usethis::use_pkgdown_github_pages()
usethis::use_pkgdown()
pkgdown::build_site()
git add .
pkgdown::build_site()
pkgdown::build_site()
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
?packageStartupMessage
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
Sys.getenv("GITHUB_PAT")
devtools::install_github("laureng-hd/hawkinR", auth_token = Sys.getenv("GITHUB_PAT"))
devtools::install_github("HawkinDynamics/hawkinR", auth_token = Sys.getenv("GITHUB_PAT"))
github_token <- Sys.getenv("GITHUB_PAT")
Sys.getenv("GITHUB_PAT")
logger::log_formatter(logger::formatter_glue_or_sprintf)
devtools::load_all(".")
